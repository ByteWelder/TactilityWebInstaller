"use strict";
(self["webpackChunkTactility_Web_Installer"] = self["webpackChunkTactility_Web_Installer"] || []).push([["node_modules_esptool-js_lib_targets_esp8266_js"],{

/***/ "./node_modules/esptool-js/lib/targets/esp8266.js":
/*!********************************************************!*\
  !*** ./node_modules/esptool-js/lib/targets/esp8266.js ***!
  \********************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   ESP8266ROM: () => (/* binding */ ESP8266ROM)
/* harmony export */ });
/* harmony import */ var _rom_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./rom.js */ "./node_modules/esptool-js/lib/targets/rom.js");

class ESP8266ROM extends _rom_js__WEBPACK_IMPORTED_MODULE_0__.ROM {
    constructor() {
        super(...arguments);
        this.CHIP_NAME = "ESP8266";
        this.CHIP_DETECT_MAGIC_VALUE = [0xfff0c101];
        this.EFUSE_RD_REG_BASE = 0x3ff00050;
        this.UART_CLKDIV_REG = 0x60000014;
        this.UART_CLKDIV_MASK = 0xfffff;
        this.XTAL_CLK_DIVIDER = 2;
        this.FLASH_WRITE_SIZE = 0x4000;
        // NOT IMPLEMENTED, SETTING EMPTY VALUE
        this.BOOTLOADER_FLASH_OFFSET = 0;
        this.UART_DATE_REG_ADDR = 0;
        this.FLASH_SIZES = {
            "512KB": 0x00,
            "256KB": 0x10,
            "1MB": 0x20,
            "2MB": 0x30,
            "4MB": 0x40,
            "2MB-c1": 0x50,
            "4MB-c1": 0x60,
            "8MB": 0x80,
            "16MB": 0x90,
        };
        this.SPI_REG_BASE = 0x60000200;
        this.SPI_USR_OFFS = 0x1c;
        this.SPI_USR1_OFFS = 0x20;
        this.SPI_USR2_OFFS = 0x24;
        this.SPI_MOSI_DLEN_OFFS = 0; // not in esp8266
        this.SPI_MISO_DLEN_OFFS = 0; // not in esp8266
        this.SPI_W0_OFFS = 0x40;
        this.getChipFeatures = async (loader) => {
            const features = ["WiFi"];
            if ((await this.getChipDescription(loader)) == "ESP8285")
                features.push("Embedded Flash");
            return features;
        };
    }
    async readEfuse(loader, offset) {
        const addr = this.EFUSE_RD_REG_BASE + 4 * offset;
        loader.debug("Read efuse " + addr);
        return await loader.readReg(addr);
    }
    async getChipDescription(loader) {
        const efuse3 = await this.readEfuse(loader, 2);
        const efuse0 = await this.readEfuse(loader, 0);
        const is8285 = ((efuse0 & (1 << 4)) | (efuse3 & (1 << 16))) != 0; // One or the other efuse bit is set for ESP8285
        return is8285 ? "ESP8285" : "ESP8266EX";
    }
    async getCrystalFreq(loader) {
        const uartDiv = (await loader.readReg(this.UART_CLKDIV_REG)) & this.UART_CLKDIV_MASK;
        const etsXtal = (loader.transport.baudrate * uartDiv) / 1000000 / this.XTAL_CLK_DIVIDER;
        let normXtal;
        if (etsXtal > 33) {
            normXtal = 40;
        }
        else {
            normXtal = 26;
        }
        if (Math.abs(normXtal - etsXtal) > 1) {
            loader.info("WARNING: Detected crystal freq " +
                etsXtal +
                "MHz is quite different to normalized freq " +
                normXtal +
                "MHz. Unsupported crystal in use?");
        }
        return normXtal;
    }
    _d2h(d) {
        const h = (+d).toString(16);
        return h.length === 1 ? "0" + h : h;
    }
    async readMac(loader) {
        let mac0 = await this.readEfuse(loader, 0);
        mac0 = mac0 >>> 0;
        let mac1 = await this.readEfuse(loader, 1);
        mac1 = mac1 >>> 0;
        let mac3 = await this.readEfuse(loader, 3);
        mac3 = mac3 >>> 0;
        const mac = new Uint8Array(6);
        if (mac3 != 0) {
            mac[0] = (mac3 >> 16) & 0xff;
            mac[1] = (mac3 >> 8) & 0xff;
            mac[2] = mac3 & 0xff;
        }
        else if (((mac1 >> 16) & 0xff) == 0) {
            mac[0] = 0x18;
            mac[1] = 0xfe;
            mac[2] = 0x34;
        }
        else if (((mac1 >> 16) & 0xff) == 1) {
            mac[0] = 0xac;
            mac[1] = 0xd0;
            mac[2] = 0x74;
        }
        else {
            loader.error("Unknown OUI");
        }
        mac[3] = (mac1 >> 8) & 0xff;
        mac[4] = mac1 & 0xff;
        mac[5] = (mac0 >> 24) & 0xff;
        return (this._d2h(mac[0]) +
            ":" +
            this._d2h(mac[1]) +
            ":" +
            this._d2h(mac[2]) +
            ":" +
            this._d2h(mac[3]) +
            ":" +
            this._d2h(mac[4]) +
            ":" +
            this._d2h(mac[5]));
    }
    getEraseSize(offset, size) {
        return size;
    }
}


/***/ })

}]);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibm9kZV9tb2R1bGVzX2VzcHRvb2wtanNfbGliX3RhcmdldHNfZXNwODI2Nl9qcy5idW5kbGUuanMiLCJtYXBwaW5ncyI6Ijs7Ozs7Ozs7Ozs7Ozs7QUFBK0I7QUFDeEIseUJBQXlCLHdDQUFHO0FBQ25DO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLHFDQUFxQztBQUNyQyxxQ0FBcUM7QUFDckM7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSwwRUFBMEU7QUFDMUU7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9UYWN0aWxpdHkgV2ViIEluc3RhbGxlci8uL25vZGVfbW9kdWxlcy9lc3B0b29sLWpzL2xpYi90YXJnZXRzL2VzcDgyNjYuanMiXSwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgUk9NIH0gZnJvbSBcIi4vcm9tLmpzXCI7XG5leHBvcnQgY2xhc3MgRVNQODI2NlJPTSBleHRlbmRzIFJPTSB7XG4gICAgY29uc3RydWN0b3IoKSB7XG4gICAgICAgIHN1cGVyKC4uLmFyZ3VtZW50cyk7XG4gICAgICAgIHRoaXMuQ0hJUF9OQU1FID0gXCJFU1A4MjY2XCI7XG4gICAgICAgIHRoaXMuQ0hJUF9ERVRFQ1RfTUFHSUNfVkFMVUUgPSBbMHhmZmYwYzEwMV07XG4gICAgICAgIHRoaXMuRUZVU0VfUkRfUkVHX0JBU0UgPSAweDNmZjAwMDUwO1xuICAgICAgICB0aGlzLlVBUlRfQ0xLRElWX1JFRyA9IDB4NjAwMDAwMTQ7XG4gICAgICAgIHRoaXMuVUFSVF9DTEtESVZfTUFTSyA9IDB4ZmZmZmY7XG4gICAgICAgIHRoaXMuWFRBTF9DTEtfRElWSURFUiA9IDI7XG4gICAgICAgIHRoaXMuRkxBU0hfV1JJVEVfU0laRSA9IDB4NDAwMDtcbiAgICAgICAgLy8gTk9UIElNUExFTUVOVEVELCBTRVRUSU5HIEVNUFRZIFZBTFVFXG4gICAgICAgIHRoaXMuQk9PVExPQURFUl9GTEFTSF9PRkZTRVQgPSAwO1xuICAgICAgICB0aGlzLlVBUlRfREFURV9SRUdfQUREUiA9IDA7XG4gICAgICAgIHRoaXMuRkxBU0hfU0laRVMgPSB7XG4gICAgICAgICAgICBcIjUxMktCXCI6IDB4MDAsXG4gICAgICAgICAgICBcIjI1NktCXCI6IDB4MTAsXG4gICAgICAgICAgICBcIjFNQlwiOiAweDIwLFxuICAgICAgICAgICAgXCIyTUJcIjogMHgzMCxcbiAgICAgICAgICAgIFwiNE1CXCI6IDB4NDAsXG4gICAgICAgICAgICBcIjJNQi1jMVwiOiAweDUwLFxuICAgICAgICAgICAgXCI0TUItYzFcIjogMHg2MCxcbiAgICAgICAgICAgIFwiOE1CXCI6IDB4ODAsXG4gICAgICAgICAgICBcIjE2TUJcIjogMHg5MCxcbiAgICAgICAgfTtcbiAgICAgICAgdGhpcy5TUElfUkVHX0JBU0UgPSAweDYwMDAwMjAwO1xuICAgICAgICB0aGlzLlNQSV9VU1JfT0ZGUyA9IDB4MWM7XG4gICAgICAgIHRoaXMuU1BJX1VTUjFfT0ZGUyA9IDB4MjA7XG4gICAgICAgIHRoaXMuU1BJX1VTUjJfT0ZGUyA9IDB4MjQ7XG4gICAgICAgIHRoaXMuU1BJX01PU0lfRExFTl9PRkZTID0gMDsgLy8gbm90IGluIGVzcDgyNjZcbiAgICAgICAgdGhpcy5TUElfTUlTT19ETEVOX09GRlMgPSAwOyAvLyBub3QgaW4gZXNwODI2NlxuICAgICAgICB0aGlzLlNQSV9XMF9PRkZTID0gMHg0MDtcbiAgICAgICAgdGhpcy5nZXRDaGlwRmVhdHVyZXMgPSBhc3luYyAobG9hZGVyKSA9PiB7XG4gICAgICAgICAgICBjb25zdCBmZWF0dXJlcyA9IFtcIldpRmlcIl07XG4gICAgICAgICAgICBpZiAoKGF3YWl0IHRoaXMuZ2V0Q2hpcERlc2NyaXB0aW9uKGxvYWRlcikpID09IFwiRVNQODI4NVwiKVxuICAgICAgICAgICAgICAgIGZlYXR1cmVzLnB1c2goXCJFbWJlZGRlZCBGbGFzaFwiKTtcbiAgICAgICAgICAgIHJldHVybiBmZWF0dXJlcztcbiAgICAgICAgfTtcbiAgICB9XG4gICAgYXN5bmMgcmVhZEVmdXNlKGxvYWRlciwgb2Zmc2V0KSB7XG4gICAgICAgIGNvbnN0IGFkZHIgPSB0aGlzLkVGVVNFX1JEX1JFR19CQVNFICsgNCAqIG9mZnNldDtcbiAgICAgICAgbG9hZGVyLmRlYnVnKFwiUmVhZCBlZnVzZSBcIiArIGFkZHIpO1xuICAgICAgICByZXR1cm4gYXdhaXQgbG9hZGVyLnJlYWRSZWcoYWRkcik7XG4gICAgfVxuICAgIGFzeW5jIGdldENoaXBEZXNjcmlwdGlvbihsb2FkZXIpIHtcbiAgICAgICAgY29uc3QgZWZ1c2UzID0gYXdhaXQgdGhpcy5yZWFkRWZ1c2UobG9hZGVyLCAyKTtcbiAgICAgICAgY29uc3QgZWZ1c2UwID0gYXdhaXQgdGhpcy5yZWFkRWZ1c2UobG9hZGVyLCAwKTtcbiAgICAgICAgY29uc3QgaXM4Mjg1ID0gKChlZnVzZTAgJiAoMSA8PCA0KSkgfCAoZWZ1c2UzICYgKDEgPDwgMTYpKSkgIT0gMDsgLy8gT25lIG9yIHRoZSBvdGhlciBlZnVzZSBiaXQgaXMgc2V0IGZvciBFU1A4Mjg1XG4gICAgICAgIHJldHVybiBpczgyODUgPyBcIkVTUDgyODVcIiA6IFwiRVNQODI2NkVYXCI7XG4gICAgfVxuICAgIGFzeW5jIGdldENyeXN0YWxGcmVxKGxvYWRlcikge1xuICAgICAgICBjb25zdCB1YXJ0RGl2ID0gKGF3YWl0IGxvYWRlci5yZWFkUmVnKHRoaXMuVUFSVF9DTEtESVZfUkVHKSkgJiB0aGlzLlVBUlRfQ0xLRElWX01BU0s7XG4gICAgICAgIGNvbnN0IGV0c1h0YWwgPSAobG9hZGVyLnRyYW5zcG9ydC5iYXVkcmF0ZSAqIHVhcnREaXYpIC8gMTAwMDAwMCAvIHRoaXMuWFRBTF9DTEtfRElWSURFUjtcbiAgICAgICAgbGV0IG5vcm1YdGFsO1xuICAgICAgICBpZiAoZXRzWHRhbCA+IDMzKSB7XG4gICAgICAgICAgICBub3JtWHRhbCA9IDQwO1xuICAgICAgICB9XG4gICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgbm9ybVh0YWwgPSAyNjtcbiAgICAgICAgfVxuICAgICAgICBpZiAoTWF0aC5hYnMobm9ybVh0YWwgLSBldHNYdGFsKSA+IDEpIHtcbiAgICAgICAgICAgIGxvYWRlci5pbmZvKFwiV0FSTklORzogRGV0ZWN0ZWQgY3J5c3RhbCBmcmVxIFwiICtcbiAgICAgICAgICAgICAgICBldHNYdGFsICtcbiAgICAgICAgICAgICAgICBcIk1IeiBpcyBxdWl0ZSBkaWZmZXJlbnQgdG8gbm9ybWFsaXplZCBmcmVxIFwiICtcbiAgICAgICAgICAgICAgICBub3JtWHRhbCArXG4gICAgICAgICAgICAgICAgXCJNSHouIFVuc3VwcG9ydGVkIGNyeXN0YWwgaW4gdXNlP1wiKTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gbm9ybVh0YWw7XG4gICAgfVxuICAgIF9kMmgoZCkge1xuICAgICAgICBjb25zdCBoID0gKCtkKS50b1N0cmluZygxNik7XG4gICAgICAgIHJldHVybiBoLmxlbmd0aCA9PT0gMSA/IFwiMFwiICsgaCA6IGg7XG4gICAgfVxuICAgIGFzeW5jIHJlYWRNYWMobG9hZGVyKSB7XG4gICAgICAgIGxldCBtYWMwID0gYXdhaXQgdGhpcy5yZWFkRWZ1c2UobG9hZGVyLCAwKTtcbiAgICAgICAgbWFjMCA9IG1hYzAgPj4+IDA7XG4gICAgICAgIGxldCBtYWMxID0gYXdhaXQgdGhpcy5yZWFkRWZ1c2UobG9hZGVyLCAxKTtcbiAgICAgICAgbWFjMSA9IG1hYzEgPj4+IDA7XG4gICAgICAgIGxldCBtYWMzID0gYXdhaXQgdGhpcy5yZWFkRWZ1c2UobG9hZGVyLCAzKTtcbiAgICAgICAgbWFjMyA9IG1hYzMgPj4+IDA7XG4gICAgICAgIGNvbnN0IG1hYyA9IG5ldyBVaW50OEFycmF5KDYpO1xuICAgICAgICBpZiAobWFjMyAhPSAwKSB7XG4gICAgICAgICAgICBtYWNbMF0gPSAobWFjMyA+PiAxNikgJiAweGZmO1xuICAgICAgICAgICAgbWFjWzFdID0gKG1hYzMgPj4gOCkgJiAweGZmO1xuICAgICAgICAgICAgbWFjWzJdID0gbWFjMyAmIDB4ZmY7XG4gICAgICAgIH1cbiAgICAgICAgZWxzZSBpZiAoKChtYWMxID4+IDE2KSAmIDB4ZmYpID09IDApIHtcbiAgICAgICAgICAgIG1hY1swXSA9IDB4MTg7XG4gICAgICAgICAgICBtYWNbMV0gPSAweGZlO1xuICAgICAgICAgICAgbWFjWzJdID0gMHgzNDtcbiAgICAgICAgfVxuICAgICAgICBlbHNlIGlmICgoKG1hYzEgPj4gMTYpICYgMHhmZikgPT0gMSkge1xuICAgICAgICAgICAgbWFjWzBdID0gMHhhYztcbiAgICAgICAgICAgIG1hY1sxXSA9IDB4ZDA7XG4gICAgICAgICAgICBtYWNbMl0gPSAweDc0O1xuICAgICAgICB9XG4gICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgbG9hZGVyLmVycm9yKFwiVW5rbm93biBPVUlcIik7XG4gICAgICAgIH1cbiAgICAgICAgbWFjWzNdID0gKG1hYzEgPj4gOCkgJiAweGZmO1xuICAgICAgICBtYWNbNF0gPSBtYWMxICYgMHhmZjtcbiAgICAgICAgbWFjWzVdID0gKG1hYzAgPj4gMjQpICYgMHhmZjtcbiAgICAgICAgcmV0dXJuICh0aGlzLl9kMmgobWFjWzBdKSArXG4gICAgICAgICAgICBcIjpcIiArXG4gICAgICAgICAgICB0aGlzLl9kMmgobWFjWzFdKSArXG4gICAgICAgICAgICBcIjpcIiArXG4gICAgICAgICAgICB0aGlzLl9kMmgobWFjWzJdKSArXG4gICAgICAgICAgICBcIjpcIiArXG4gICAgICAgICAgICB0aGlzLl9kMmgobWFjWzNdKSArXG4gICAgICAgICAgICBcIjpcIiArXG4gICAgICAgICAgICB0aGlzLl9kMmgobWFjWzRdKSArXG4gICAgICAgICAgICBcIjpcIiArXG4gICAgICAgICAgICB0aGlzLl9kMmgobWFjWzVdKSk7XG4gICAgfVxuICAgIGdldEVyYXNlU2l6ZShvZmZzZXQsIHNpemUpIHtcbiAgICAgICAgcmV0dXJuIHNpemU7XG4gICAgfVxufVxuIl0sIm5hbWVzIjpbXSwic291cmNlUm9vdCI6IiJ9