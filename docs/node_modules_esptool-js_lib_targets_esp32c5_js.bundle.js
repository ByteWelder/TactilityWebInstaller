"use strict";
(self["webpackChunkTactility_Web_Installer"] = self["webpackChunkTactility_Web_Installer"] || []).push([["node_modules_esptool-js_lib_targets_esp32c5_js"],{

/***/ "./node_modules/esptool-js/lib/targets/esp32c5.js":
/*!********************************************************!*\
  !*** ./node_modules/esptool-js/lib/targets/esp32c5.js ***!
  \********************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   ESP32C5ROM: () => (/* binding */ ESP32C5ROM)
/* harmony export */ });
/* harmony import */ var _esp32c6__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./esp32c6 */ "./node_modules/esptool-js/lib/targets/esp32c6.js");

class ESP32C5ROM extends _esp32c6__WEBPACK_IMPORTED_MODULE_0__.ESP32C6ROM {
    constructor() {
        super(...arguments);
        this.CHIP_NAME = "ESP32-C5";
        this.IMAGE_CHIP_ID = 23;
        this.BOOTLOADER_FLASH_OFFSET = 0x2000;
        this.EFUSE_BASE = 0x600b4800;
        this.EFUSE_BLOCK1_ADDR = this.EFUSE_BASE + 0x044;
        this.MAC_EFUSE_REG = this.EFUSE_BASE + 0x044;
        this.UART_CLKDIV_REG = 0x60000014;
        this.EFUSE_RD_REG_BASE = this.EFUSE_BASE + 0x030; // BLOCK0 read base address
        this.EFUSE_PURPOSE_KEY0_REG = this.EFUSE_BASE + 0x34;
        this.EFUSE_PURPOSE_KEY0_SHIFT = 24;
        this.EFUSE_PURPOSE_KEY1_REG = this.EFUSE_BASE + 0x34;
        this.EFUSE_PURPOSE_KEY1_SHIFT = 28;
        this.EFUSE_PURPOSE_KEY2_REG = this.EFUSE_BASE + 0x38;
        this.EFUSE_PURPOSE_KEY2_SHIFT = 0;
        this.EFUSE_PURPOSE_KEY3_REG = this.EFUSE_BASE + 0x38;
        this.EFUSE_PURPOSE_KEY3_SHIFT = 4;
        this.EFUSE_PURPOSE_KEY4_REG = this.EFUSE_BASE + 0x38;
        this.EFUSE_PURPOSE_KEY4_SHIFT = 8;
        this.EFUSE_PURPOSE_KEY5_REG = this.EFUSE_BASE + 0x38;
        this.EFUSE_PURPOSE_KEY5_SHIFT = 12;
        this.EFUSE_DIS_DOWNLOAD_MANUAL_ENCRYPT_REG = this.EFUSE_RD_REG_BASE;
        this.EFUSE_DIS_DOWNLOAD_MANUAL_ENCRYPT = 1 << 20;
        this.EFUSE_SPI_BOOT_CRYPT_CNT_REG = this.EFUSE_BASE + 0x034;
        this.EFUSE_SPI_BOOT_CRYPT_CNT_MASK = 0x7 << 18;
        this.EFUSE_SECURE_BOOT_EN_REG = this.EFUSE_BASE + 0x038;
        this.EFUSE_SECURE_BOOT_EN_MASK = 1 << 20;
        this.IROM_MAP_START = 0x42000000;
        this.IROM_MAP_END = 0x42800000;
        this.DROM_MAP_START = 0x42800000;
        this.DROM_MAP_END = 0x43000000;
        this.PCR_SYSCLK_CONF_REG = 0x60096110;
        this.PCR_SYSCLK_XTAL_FREQ_V = 0x7f << 24;
        this.PCR_SYSCLK_XTAL_FREQ_S = 24;
        this.XTAL_CLK_DIVIDER = 1;
        this.UARTDEV_BUF_NO = 0x4085f51c; // Variable in ROM .bss which indicates the port in use
        // Magic value for ESP32C5
        this.CHIP_DETECT_MAGIC_VALUE = [0x1101406f, 0x63e1406f, 0x5fd1406f];
        this.FLASH_FREQUENCY = {
            "80m": 0xf,
            "40m": 0x0,
            "20m": 0x2,
        };
        this.MEMORY_MAP = [
            [0x00000000, 0x00010000, "PADDING"],
            [0x42800000, 0x43000000, "DROM"],
            [0x40800000, 0x40860000, "DRAM"],
            [0x40800000, 0x40860000, "BYTE_ACCESSIBLE"],
            [0x4003a000, 0x40040000, "DROM_MASK"],
            [0x40000000, 0x4003a000, "IROM_MASK"],
            [0x42000000, 0x42800000, "IROM"],
            [0x40800000, 0x40860000, "IRAM"],
            [0x50000000, 0x50004000, "RTC_IRAM"],
            [0x50000000, 0x50004000, "RTC_DRAM"],
            [0x600fe000, 0x60100000, "MEM_INTERNAL2"],
        ];
        this.UF2_FAMILY_ID = 0xf71c0343;
        this.EFUSE_MAX_KEY = 5;
        this.KEY_PURPOSES = {
            0: "USER/EMPTY",
            1: "ECDSA_KEY",
            2: "XTS_AES_256_KEY_1",
            3: "XTS_AES_256_KEY_2",
            4: "XTS_AES_128_KEY",
            5: "HMAC_DOWN_ALL",
            6: "HMAC_DOWN_JTAG",
            7: "HMAC_DOWN_DIGITAL_SIGNATURE",
            8: "HMAC_UP",
            9: "SECURE_BOOT_DIGEST0",
            10: "SECURE_BOOT_DIGEST1",
            11: "SECURE_BOOT_DIGEST2",
            12: "KM_INIT_KEY",
        };
    }
    async getPkgVersion(loader) {
        const numWord = 2;
        return ((await loader.readReg(this.EFUSE_BLOCK1_ADDR + 4 * numWord)) >> 26) & 0x07;
    }
    async getMinorChipVersion(loader) {
        const numWord = 2;
        return ((await loader.readReg(this.EFUSE_BLOCK1_ADDR + 4 * numWord)) >> 0) & 0x0f;
    }
    async getMajorChipVersion(loader) {
        const numWord = 2;
        return ((await loader.readReg(this.EFUSE_BLOCK1_ADDR + 4 * numWord)) >> 4) & 0x03;
    }
    async getChipDescription(loader) {
        const pkgVer = await this.getPkgVersion(loader);
        let desc;
        if (pkgVer === 0) {
            desc = "ESP32-C5";
        }
        else {
            desc = "unknown ESP32-C5";
        }
        const majorRev = await this.getMajorChipVersion(loader);
        const minorRev = await this.getMinorChipVersion(loader);
        return `${desc} (revision v${majorRev}.${minorRev})`;
    }
    async getChipFeatures(loader) {
        return ["Wi-Fi 6 (dual-band)", "BT 5 (LE)"];
    }
    async getCrystalFreq(loader) {
        // The crystal detection algorithm of ESP32/ESP8266
        // works for ESP32-C5 as well.
        const uartDiv = (await loader.readReg(this.UART_CLKDIV_REG)) & this.UART_CLKDIV_MASK;
        const etsXtal = (loader.transport.baudrate * uartDiv) / 1000000 / this.XTAL_CLK_DIVIDER;
        let normXtal;
        if (etsXtal > 45) {
            normXtal = 48;
        }
        else if (etsXtal > 33) {
            normXtal = 40;
        }
        else {
            normXtal = 26;
        }
        if (Math.abs(normXtal - etsXtal) > 1) {
            loader.info("WARNING: Unsupported crystal in use");
        }
        return normXtal;
    }
    async getCrystalFreqRomExpect(loader) {
        return (((await loader.readReg(this.PCR_SYSCLK_CONF_REG)) & this.PCR_SYSCLK_XTAL_FREQ_V) >> this.PCR_SYSCLK_XTAL_FREQ_S);
    }
}


/***/ }),

/***/ "./node_modules/esptool-js/lib/targets/esp32c6.js":
/*!********************************************************!*\
  !*** ./node_modules/esptool-js/lib/targets/esp32c6.js ***!
  \********************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   ESP32C6ROM: () => (/* binding */ ESP32C6ROM)
/* harmony export */ });
/* harmony import */ var _rom_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./rom.js */ "./node_modules/esptool-js/lib/targets/rom.js");

class ESP32C6ROM extends _rom_js__WEBPACK_IMPORTED_MODULE_0__.ROM {
    constructor() {
        super(...arguments);
        this.CHIP_NAME = "ESP32-C6";
        this.IMAGE_CHIP_ID = 13;
        this.EFUSE_BASE = 0x600b0800;
        this.MAC_EFUSE_REG = this.EFUSE_BASE + 0x044;
        this.UART_CLKDIV_REG = 0x3ff40014;
        this.UART_CLKDIV_MASK = 0xfffff;
        this.UART_DATE_REG_ADDR = 0x6000007c;
        this.FLASH_WRITE_SIZE = 0x400;
        this.BOOTLOADER_FLASH_OFFSET = 0;
        this.FLASH_SIZES = {
            "1MB": 0x00,
            "2MB": 0x10,
            "4MB": 0x20,
            "8MB": 0x30,
            "16MB": 0x40,
        };
        this.SPI_REG_BASE = 0x60002000;
        this.SPI_USR_OFFS = 0x18;
        this.SPI_USR1_OFFS = 0x1c;
        this.SPI_USR2_OFFS = 0x20;
        this.SPI_MOSI_DLEN_OFFS = 0x24;
        this.SPI_MISO_DLEN_OFFS = 0x28;
        this.SPI_W0_OFFS = 0x58;
    }
    async getPkgVersion(loader) {
        const numWord = 3;
        const block1Addr = this.EFUSE_BASE + 0x044;
        const addr = block1Addr + 4 * numWord;
        const word3 = await loader.readReg(addr);
        const pkgVersion = (word3 >> 21) & 0x07;
        return pkgVersion;
    }
    async getChipRevision(loader) {
        const block1Addr = this.EFUSE_BASE + 0x044;
        const numWord = 3;
        const pos = 18;
        const addr = block1Addr + 4 * numWord;
        const ret = ((await loader.readReg(addr)) & (0x7 << pos)) >> pos;
        return ret;
    }
    async getChipDescription(loader) {
        let desc;
        const pkgVer = await this.getPkgVersion(loader);
        if (pkgVer === 0) {
            desc = "ESP32-C6";
        }
        else {
            desc = "unknown ESP32-C6";
        }
        const chipRev = await this.getChipRevision(loader);
        desc += " (revision " + chipRev + ")";
        return desc;
    }
    async getChipFeatures(loader) {
        return ["Wi-Fi 6", "BT 5", "IEEE802.15.4"];
    }
    async getCrystalFreq(loader) {
        return 40;
    }
    _d2h(d) {
        const h = (+d).toString(16);
        return h.length === 1 ? "0" + h : h;
    }
    async readMac(loader) {
        let mac0 = await loader.readReg(this.MAC_EFUSE_REG);
        mac0 = mac0 >>> 0;
        let mac1 = await loader.readReg(this.MAC_EFUSE_REG + 4);
        mac1 = (mac1 >>> 0) & 0x0000ffff;
        const mac = new Uint8Array(6);
        mac[0] = (mac1 >> 8) & 0xff;
        mac[1] = mac1 & 0xff;
        mac[2] = (mac0 >> 24) & 0xff;
        mac[3] = (mac0 >> 16) & 0xff;
        mac[4] = (mac0 >> 8) & 0xff;
        mac[5] = mac0 & 0xff;
        return (this._d2h(mac[0]) +
            ":" +
            this._d2h(mac[1]) +
            ":" +
            this._d2h(mac[2]) +
            ":" +
            this._d2h(mac[3]) +
            ":" +
            this._d2h(mac[4]) +
            ":" +
            this._d2h(mac[5]));
    }
    getEraseSize(offset, size) {
        return size;
    }
}


/***/ })

}]);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,