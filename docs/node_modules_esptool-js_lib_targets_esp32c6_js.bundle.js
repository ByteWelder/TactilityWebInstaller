"use strict";
(self["webpackChunkTactility_Web_Installer"] = self["webpackChunkTactility_Web_Installer"] || []).push([["node_modules_esptool-js_lib_targets_esp32c6_js"],{

/***/ "./node_modules/esptool-js/lib/targets/esp32c6.js":
/*!********************************************************!*\
  !*** ./node_modules/esptool-js/lib/targets/esp32c6.js ***!
  \********************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   ESP32C6ROM: () => (/* binding */ ESP32C6ROM)
/* harmony export */ });
/* harmony import */ var _rom_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./rom.js */ "./node_modules/esptool-js/lib/targets/rom.js");

class ESP32C6ROM extends _rom_js__WEBPACK_IMPORTED_MODULE_0__.ROM {
    constructor() {
        super(...arguments);
        this.CHIP_NAME = "ESP32-C6";
        this.IMAGE_CHIP_ID = 13;
        this.EFUSE_BASE = 0x600b0800;
        this.MAC_EFUSE_REG = this.EFUSE_BASE + 0x044;
        this.UART_CLKDIV_REG = 0x3ff40014;
        this.UART_CLKDIV_MASK = 0xfffff;
        this.UART_DATE_REG_ADDR = 0x6000007c;
        this.FLASH_WRITE_SIZE = 0x400;
        this.BOOTLOADER_FLASH_OFFSET = 0;
        this.FLASH_SIZES = {
            "1MB": 0x00,
            "2MB": 0x10,
            "4MB": 0x20,
            "8MB": 0x30,
            "16MB": 0x40,
        };
        this.SPI_REG_BASE = 0x60002000;
        this.SPI_USR_OFFS = 0x18;
        this.SPI_USR1_OFFS = 0x1c;
        this.SPI_USR2_OFFS = 0x20;
        this.SPI_MOSI_DLEN_OFFS = 0x24;
        this.SPI_MISO_DLEN_OFFS = 0x28;
        this.SPI_W0_OFFS = 0x58;
    }
    async getPkgVersion(loader) {
        const numWord = 3;
        const block1Addr = this.EFUSE_BASE + 0x044;
        const addr = block1Addr + 4 * numWord;
        const word3 = await loader.readReg(addr);
        const pkgVersion = (word3 >> 21) & 0x07;
        return pkgVersion;
    }
    async getChipRevision(loader) {
        const block1Addr = this.EFUSE_BASE + 0x044;
        const numWord = 3;
        const pos = 18;
        const addr = block1Addr + 4 * numWord;
        const ret = ((await loader.readReg(addr)) & (0x7 << pos)) >> pos;
        return ret;
    }
    async getChipDescription(loader) {
        let desc;
        const pkgVer = await this.getPkgVersion(loader);
        if (pkgVer === 0) {
            desc = "ESP32-C6";
        }
        else {
            desc = "unknown ESP32-C6";
        }
        const chipRev = await this.getChipRevision(loader);
        desc += " (revision " + chipRev + ")";
        return desc;
    }
    async getChipFeatures(loader) {
        return ["Wi-Fi 6", "BT 5", "IEEE802.15.4"];
    }
    async getCrystalFreq(loader) {
        return 40;
    }
    _d2h(d) {
        const h = (+d).toString(16);
        return h.length === 1 ? "0" + h : h;
    }
    async readMac(loader) {
        let mac0 = await loader.readReg(this.MAC_EFUSE_REG);
        mac0 = mac0 >>> 0;
        let mac1 = await loader.readReg(this.MAC_EFUSE_REG + 4);
        mac1 = (mac1 >>> 0) & 0x0000ffff;
        const mac = new Uint8Array(6);
        mac[0] = (mac1 >> 8) & 0xff;
        mac[1] = mac1 & 0xff;
        mac[2] = (mac0 >> 24) & 0xff;
        mac[3] = (mac0 >> 16) & 0xff;
        mac[4] = (mac0 >> 8) & 0xff;
        mac[5] = mac0 & 0xff;
        return (this._d2h(mac[0]) +
            ":" +
            this._d2h(mac[1]) +
            ":" +
            this._d2h(mac[2]) +
            ":" +
            this._d2h(mac[3]) +
            ":" +
            this._d2h(mac[4]) +
            ":" +
            this._d2h(mac[5]));
    }
    getEraseSize(offset, size) {
        return size;
    }
}


/***/ })

}]);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibm9kZV9tb2R1bGVzX2VzcHRvb2wtanNfbGliX3RhcmdldHNfZXNwMzJjNl9qcy5idW5kbGUuanMiLCJtYXBwaW5ncyI6Ijs7Ozs7Ozs7Ozs7Ozs7QUFBK0I7QUFDeEIseUJBQXlCLHdDQUFHO0FBQ25DO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSIsInNvdXJjZXMiOlsid2VicGFjazovL1RhY3RpbGl0eSBXZWIgSW5zdGFsbGVyLy4vbm9kZV9tb2R1bGVzL2VzcHRvb2wtanMvbGliL3RhcmdldHMvZXNwMzJjNi5qcyJdLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBST00gfSBmcm9tIFwiLi9yb20uanNcIjtcbmV4cG9ydCBjbGFzcyBFU1AzMkM2Uk9NIGV4dGVuZHMgUk9NIHtcbiAgICBjb25zdHJ1Y3RvcigpIHtcbiAgICAgICAgc3VwZXIoLi4uYXJndW1lbnRzKTtcbiAgICAgICAgdGhpcy5DSElQX05BTUUgPSBcIkVTUDMyLUM2XCI7XG4gICAgICAgIHRoaXMuSU1BR0VfQ0hJUF9JRCA9IDEzO1xuICAgICAgICB0aGlzLkVGVVNFX0JBU0UgPSAweDYwMGIwODAwO1xuICAgICAgICB0aGlzLk1BQ19FRlVTRV9SRUcgPSB0aGlzLkVGVVNFX0JBU0UgKyAweDA0NDtcbiAgICAgICAgdGhpcy5VQVJUX0NMS0RJVl9SRUcgPSAweDNmZjQwMDE0O1xuICAgICAgICB0aGlzLlVBUlRfQ0xLRElWX01BU0sgPSAweGZmZmZmO1xuICAgICAgICB0aGlzLlVBUlRfREFURV9SRUdfQUREUiA9IDB4NjAwMDAwN2M7XG4gICAgICAgIHRoaXMuRkxBU0hfV1JJVEVfU0laRSA9IDB4NDAwO1xuICAgICAgICB0aGlzLkJPT1RMT0FERVJfRkxBU0hfT0ZGU0VUID0gMDtcbiAgICAgICAgdGhpcy5GTEFTSF9TSVpFUyA9IHtcbiAgICAgICAgICAgIFwiMU1CXCI6IDB4MDAsXG4gICAgICAgICAgICBcIjJNQlwiOiAweDEwLFxuICAgICAgICAgICAgXCI0TUJcIjogMHgyMCxcbiAgICAgICAgICAgIFwiOE1CXCI6IDB4MzAsXG4gICAgICAgICAgICBcIjE2TUJcIjogMHg0MCxcbiAgICAgICAgfTtcbiAgICAgICAgdGhpcy5TUElfUkVHX0JBU0UgPSAweDYwMDAyMDAwO1xuICAgICAgICB0aGlzLlNQSV9VU1JfT0ZGUyA9IDB4MTg7XG4gICAgICAgIHRoaXMuU1BJX1VTUjFfT0ZGUyA9IDB4MWM7XG4gICAgICAgIHRoaXMuU1BJX1VTUjJfT0ZGUyA9IDB4MjA7XG4gICAgICAgIHRoaXMuU1BJX01PU0lfRExFTl9PRkZTID0gMHgyNDtcbiAgICAgICAgdGhpcy5TUElfTUlTT19ETEVOX09GRlMgPSAweDI4O1xuICAgICAgICB0aGlzLlNQSV9XMF9PRkZTID0gMHg1ODtcbiAgICB9XG4gICAgYXN5bmMgZ2V0UGtnVmVyc2lvbihsb2FkZXIpIHtcbiAgICAgICAgY29uc3QgbnVtV29yZCA9IDM7XG4gICAgICAgIGNvbnN0IGJsb2NrMUFkZHIgPSB0aGlzLkVGVVNFX0JBU0UgKyAweDA0NDtcbiAgICAgICAgY29uc3QgYWRkciA9IGJsb2NrMUFkZHIgKyA0ICogbnVtV29yZDtcbiAgICAgICAgY29uc3Qgd29yZDMgPSBhd2FpdCBsb2FkZXIucmVhZFJlZyhhZGRyKTtcbiAgICAgICAgY29uc3QgcGtnVmVyc2lvbiA9ICh3b3JkMyA+PiAyMSkgJiAweDA3O1xuICAgICAgICByZXR1cm4gcGtnVmVyc2lvbjtcbiAgICB9XG4gICAgYXN5bmMgZ2V0Q2hpcFJldmlzaW9uKGxvYWRlcikge1xuICAgICAgICBjb25zdCBibG9jazFBZGRyID0gdGhpcy5FRlVTRV9CQVNFICsgMHgwNDQ7XG4gICAgICAgIGNvbnN0IG51bVdvcmQgPSAzO1xuICAgICAgICBjb25zdCBwb3MgPSAxODtcbiAgICAgICAgY29uc3QgYWRkciA9IGJsb2NrMUFkZHIgKyA0ICogbnVtV29yZDtcbiAgICAgICAgY29uc3QgcmV0ID0gKChhd2FpdCBsb2FkZXIucmVhZFJlZyhhZGRyKSkgJiAoMHg3IDw8IHBvcykpID4+IHBvcztcbiAgICAgICAgcmV0dXJuIHJldDtcbiAgICB9XG4gICAgYXN5bmMgZ2V0Q2hpcERlc2NyaXB0aW9uKGxvYWRlcikge1xuICAgICAgICBsZXQgZGVzYztcbiAgICAgICAgY29uc3QgcGtnVmVyID0gYXdhaXQgdGhpcy5nZXRQa2dWZXJzaW9uKGxvYWRlcik7XG4gICAgICAgIGlmIChwa2dWZXIgPT09IDApIHtcbiAgICAgICAgICAgIGRlc2MgPSBcIkVTUDMyLUM2XCI7XG4gICAgICAgIH1cbiAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICBkZXNjID0gXCJ1bmtub3duIEVTUDMyLUM2XCI7XG4gICAgICAgIH1cbiAgICAgICAgY29uc3QgY2hpcFJldiA9IGF3YWl0IHRoaXMuZ2V0Q2hpcFJldmlzaW9uKGxvYWRlcik7XG4gICAgICAgIGRlc2MgKz0gXCIgKHJldmlzaW9uIFwiICsgY2hpcFJldiArIFwiKVwiO1xuICAgICAgICByZXR1cm4gZGVzYztcbiAgICB9XG4gICAgYXN5bmMgZ2V0Q2hpcEZlYXR1cmVzKGxvYWRlcikge1xuICAgICAgICByZXR1cm4gW1wiV2ktRmkgNlwiLCBcIkJUIDVcIiwgXCJJRUVFODAyLjE1LjRcIl07XG4gICAgfVxuICAgIGFzeW5jIGdldENyeXN0YWxGcmVxKGxvYWRlcikge1xuICAgICAgICByZXR1cm4gNDA7XG4gICAgfVxuICAgIF9kMmgoZCkge1xuICAgICAgICBjb25zdCBoID0gKCtkKS50b1N0cmluZygxNik7XG4gICAgICAgIHJldHVybiBoLmxlbmd0aCA9PT0gMSA/IFwiMFwiICsgaCA6IGg7XG4gICAgfVxuICAgIGFzeW5jIHJlYWRNYWMobG9hZGVyKSB7XG4gICAgICAgIGxldCBtYWMwID0gYXdhaXQgbG9hZGVyLnJlYWRSZWcodGhpcy5NQUNfRUZVU0VfUkVHKTtcbiAgICAgICAgbWFjMCA9IG1hYzAgPj4+IDA7XG4gICAgICAgIGxldCBtYWMxID0gYXdhaXQgbG9hZGVyLnJlYWRSZWcodGhpcy5NQUNfRUZVU0VfUkVHICsgNCk7XG4gICAgICAgIG1hYzEgPSAobWFjMSA+Pj4gMCkgJiAweDAwMDBmZmZmO1xuICAgICAgICBjb25zdCBtYWMgPSBuZXcgVWludDhBcnJheSg2KTtcbiAgICAgICAgbWFjWzBdID0gKG1hYzEgPj4gOCkgJiAweGZmO1xuICAgICAgICBtYWNbMV0gPSBtYWMxICYgMHhmZjtcbiAgICAgICAgbWFjWzJdID0gKG1hYzAgPj4gMjQpICYgMHhmZjtcbiAgICAgICAgbWFjWzNdID0gKG1hYzAgPj4gMTYpICYgMHhmZjtcbiAgICAgICAgbWFjWzRdID0gKG1hYzAgPj4gOCkgJiAweGZmO1xuICAgICAgICBtYWNbNV0gPSBtYWMwICYgMHhmZjtcbiAgICAgICAgcmV0dXJuICh0aGlzLl9kMmgobWFjWzBdKSArXG4gICAgICAgICAgICBcIjpcIiArXG4gICAgICAgICAgICB0aGlzLl9kMmgobWFjWzFdKSArXG4gICAgICAgICAgICBcIjpcIiArXG4gICAgICAgICAgICB0aGlzLl9kMmgobWFjWzJdKSArXG4gICAgICAgICAgICBcIjpcIiArXG4gICAgICAgICAgICB0aGlzLl9kMmgobWFjWzNdKSArXG4gICAgICAgICAgICBcIjpcIiArXG4gICAgICAgICAgICB0aGlzLl9kMmgobWFjWzRdKSArXG4gICAgICAgICAgICBcIjpcIiArXG4gICAgICAgICAgICB0aGlzLl9kMmgobWFjWzVdKSk7XG4gICAgfVxuICAgIGdldEVyYXNlU2l6ZShvZmZzZXQsIHNpemUpIHtcbiAgICAgICAgcmV0dXJuIHNpemU7XG4gICAgfVxufVxuIl0sIm5hbWVzIjpbXSwic291cmNlUm9vdCI6IiJ9