"use strict";
(self["webpackChunkTactility_Web_Installer"] = self["webpackChunkTactility_Web_Installer"] || []).push([["node_modules_esptool-js_lib_targets_esp32c3_js"],{

/***/ "./node_modules/esptool-js/lib/targets/esp32c3.js":
/*!********************************************************!*\
  !*** ./node_modules/esptool-js/lib/targets/esp32c3.js ***!
  \********************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   ESP32C3ROM: () => (/* binding */ ESP32C3ROM)
/* harmony export */ });
/* harmony import */ var _rom_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./rom.js */ "./node_modules/esptool-js/lib/targets/rom.js");

class ESP32C3ROM extends _rom_js__WEBPACK_IMPORTED_MODULE_0__.ROM {
    constructor() {
        super(...arguments);
        this.CHIP_NAME = "ESP32-C3";
        this.IMAGE_CHIP_ID = 5;
        this.EFUSE_BASE = 0x60008800;
        this.MAC_EFUSE_REG = this.EFUSE_BASE + 0x044;
        this.UART_CLKDIV_REG = 0x3ff40014;
        this.UART_CLKDIV_MASK = 0xfffff;
        this.UART_DATE_REG_ADDR = 0x6000007c;
        this.FLASH_WRITE_SIZE = 0x400;
        this.BOOTLOADER_FLASH_OFFSET = 0;
        this.FLASH_SIZES = {
            "1MB": 0x00,
            "2MB": 0x10,
            "4MB": 0x20,
            "8MB": 0x30,
            "16MB": 0x40,
        };
        this.SPI_REG_BASE = 0x60002000;
        this.SPI_USR_OFFS = 0x18;
        this.SPI_USR1_OFFS = 0x1c;
        this.SPI_USR2_OFFS = 0x20;
        this.SPI_MOSI_DLEN_OFFS = 0x24;
        this.SPI_MISO_DLEN_OFFS = 0x28;
        this.SPI_W0_OFFS = 0x58;
    }
    async getPkgVersion(loader) {
        const numWord = 3;
        const block1Addr = this.EFUSE_BASE + 0x044;
        const addr = block1Addr + 4 * numWord;
        const word3 = await loader.readReg(addr);
        const pkgVersion = (word3 >> 21) & 0x07;
        return pkgVersion;
    }
    async getChipRevision(loader) {
        const block1Addr = this.EFUSE_BASE + 0x044;
        const numWord = 3;
        const pos = 18;
        const addr = block1Addr + 4 * numWord;
        const ret = ((await loader.readReg(addr)) & (0x7 << pos)) >> pos;
        return ret;
    }
    async getChipDescription(loader) {
        let desc;
        const pkgVer = await this.getPkgVersion(loader);
        if (pkgVer === 0) {
            desc = "ESP32-C3";
        }
        else {
            desc = "unknown ESP32-C3";
        }
        const chip_rev = await this.getChipRevision(loader);
        desc += " (revision " + chip_rev + ")";
        return desc;
    }
    async getFlashCap(loader) {
        const numWord = 3;
        const block1Addr = this.EFUSE_BASE + 0x044;
        const addr = block1Addr + 4 * numWord;
        const registerValue = await loader.readReg(addr);
        const flashCap = (registerValue >> 27) & 0x07;
        return flashCap;
    }
    async getFlashVendor(loader) {
        const numWord = 4;
        const block1Addr = this.EFUSE_BASE + 0x044;
        const addr = block1Addr + 4 * numWord;
        const registerValue = await loader.readReg(addr);
        const vendorId = (registerValue >> 0) & 0x07;
        const vendorMap = {
            1: "XMC",
            2: "GD",
            3: "FM",
            4: "TT",
            5: "ZBIT",
        };
        return vendorMap[vendorId] || "";
    }
    async getChipFeatures(loader) {
        const features = ["Wi-Fi", "BLE"];
        const flashMap = {
            0: null,
            1: "Embedded Flash 4MB",
            2: "Embedded Flash 2MB",
            3: "Embedded Flash 1MB",
            4: "Embedded Flash 8MB",
        };
        const flashCap = await this.getFlashCap(loader);
        const flashVendor = await this.getFlashVendor(loader);
        const flash = flashMap[flashCap];
        const flashDescription = flash !== undefined ? flash : "Unknown Embedded Flash";
        if (flash !== null) {
            features.push(`${flashDescription} (${flashVendor})`);
        }
        return features;
    }
    async getCrystalFreq(loader) {
        return 40;
    }
    _d2h(d) {
        const h = (+d).toString(16);
        return h.length === 1 ? "0" + h : h;
    }
    async readMac(loader) {
        let mac0 = await loader.readReg(this.MAC_EFUSE_REG);
        mac0 = mac0 >>> 0;
        let mac1 = await loader.readReg(this.MAC_EFUSE_REG + 4);
        mac1 = (mac1 >>> 0) & 0x0000ffff;
        const mac = new Uint8Array(6);
        mac[0] = (mac1 >> 8) & 0xff;
        mac[1] = mac1 & 0xff;
        mac[2] = (mac0 >> 24) & 0xff;
        mac[3] = (mac0 >> 16) & 0xff;
        mac[4] = (mac0 >> 8) & 0xff;
        mac[5] = mac0 & 0xff;
        return (this._d2h(mac[0]) +
            ":" +
            this._d2h(mac[1]) +
            ":" +
            this._d2h(mac[2]) +
            ":" +
            this._d2h(mac[3]) +
            ":" +
            this._d2h(mac[4]) +
            ":" +
            this._d2h(mac[5]));
    }
    getEraseSize(offset, size) {
        return size;
    }
}


/***/ })

}]);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibm9kZV9tb2R1bGVzX2VzcHRvb2wtanNfbGliX3RhcmdldHNfZXNwMzJjM19qcy5idW5kbGUuanMiLCJtYXBwaW5ncyI6Ijs7Ozs7Ozs7Ozs7Ozs7QUFBK0I7QUFDeEIseUJBQXlCLHdDQUFHO0FBQ25DO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSw2QkFBNkIsa0JBQWtCLEdBQUcsWUFBWTtBQUM5RDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vVGFjdGlsaXR5IFdlYiBJbnN0YWxsZXIvLi9ub2RlX21vZHVsZXMvZXNwdG9vbC1qcy9saWIvdGFyZ2V0cy9lc3AzMmMzLmpzIl0sInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IFJPTSB9IGZyb20gXCIuL3JvbS5qc1wiO1xuZXhwb3J0IGNsYXNzIEVTUDMyQzNST00gZXh0ZW5kcyBST00ge1xuICAgIGNvbnN0cnVjdG9yKCkge1xuICAgICAgICBzdXBlciguLi5hcmd1bWVudHMpO1xuICAgICAgICB0aGlzLkNISVBfTkFNRSA9IFwiRVNQMzItQzNcIjtcbiAgICAgICAgdGhpcy5JTUFHRV9DSElQX0lEID0gNTtcbiAgICAgICAgdGhpcy5FRlVTRV9CQVNFID0gMHg2MDAwODgwMDtcbiAgICAgICAgdGhpcy5NQUNfRUZVU0VfUkVHID0gdGhpcy5FRlVTRV9CQVNFICsgMHgwNDQ7XG4gICAgICAgIHRoaXMuVUFSVF9DTEtESVZfUkVHID0gMHgzZmY0MDAxNDtcbiAgICAgICAgdGhpcy5VQVJUX0NMS0RJVl9NQVNLID0gMHhmZmZmZjtcbiAgICAgICAgdGhpcy5VQVJUX0RBVEVfUkVHX0FERFIgPSAweDYwMDAwMDdjO1xuICAgICAgICB0aGlzLkZMQVNIX1dSSVRFX1NJWkUgPSAweDQwMDtcbiAgICAgICAgdGhpcy5CT09UTE9BREVSX0ZMQVNIX09GRlNFVCA9IDA7XG4gICAgICAgIHRoaXMuRkxBU0hfU0laRVMgPSB7XG4gICAgICAgICAgICBcIjFNQlwiOiAweDAwLFxuICAgICAgICAgICAgXCIyTUJcIjogMHgxMCxcbiAgICAgICAgICAgIFwiNE1CXCI6IDB4MjAsXG4gICAgICAgICAgICBcIjhNQlwiOiAweDMwLFxuICAgICAgICAgICAgXCIxNk1CXCI6IDB4NDAsXG4gICAgICAgIH07XG4gICAgICAgIHRoaXMuU1BJX1JFR19CQVNFID0gMHg2MDAwMjAwMDtcbiAgICAgICAgdGhpcy5TUElfVVNSX09GRlMgPSAweDE4O1xuICAgICAgICB0aGlzLlNQSV9VU1IxX09GRlMgPSAweDFjO1xuICAgICAgICB0aGlzLlNQSV9VU1IyX09GRlMgPSAweDIwO1xuICAgICAgICB0aGlzLlNQSV9NT1NJX0RMRU5fT0ZGUyA9IDB4MjQ7XG4gICAgICAgIHRoaXMuU1BJX01JU09fRExFTl9PRkZTID0gMHgyODtcbiAgICAgICAgdGhpcy5TUElfVzBfT0ZGUyA9IDB4NTg7XG4gICAgfVxuICAgIGFzeW5jIGdldFBrZ1ZlcnNpb24obG9hZGVyKSB7XG4gICAgICAgIGNvbnN0IG51bVdvcmQgPSAzO1xuICAgICAgICBjb25zdCBibG9jazFBZGRyID0gdGhpcy5FRlVTRV9CQVNFICsgMHgwNDQ7XG4gICAgICAgIGNvbnN0IGFkZHIgPSBibG9jazFBZGRyICsgNCAqIG51bVdvcmQ7XG4gICAgICAgIGNvbnN0IHdvcmQzID0gYXdhaXQgbG9hZGVyLnJlYWRSZWcoYWRkcik7XG4gICAgICAgIGNvbnN0IHBrZ1ZlcnNpb24gPSAod29yZDMgPj4gMjEpICYgMHgwNztcbiAgICAgICAgcmV0dXJuIHBrZ1ZlcnNpb247XG4gICAgfVxuICAgIGFzeW5jIGdldENoaXBSZXZpc2lvbihsb2FkZXIpIHtcbiAgICAgICAgY29uc3QgYmxvY2sxQWRkciA9IHRoaXMuRUZVU0VfQkFTRSArIDB4MDQ0O1xuICAgICAgICBjb25zdCBudW1Xb3JkID0gMztcbiAgICAgICAgY29uc3QgcG9zID0gMTg7XG4gICAgICAgIGNvbnN0IGFkZHIgPSBibG9jazFBZGRyICsgNCAqIG51bVdvcmQ7XG4gICAgICAgIGNvbnN0IHJldCA9ICgoYXdhaXQgbG9hZGVyLnJlYWRSZWcoYWRkcikpICYgKDB4NyA8PCBwb3MpKSA+PiBwb3M7XG4gICAgICAgIHJldHVybiByZXQ7XG4gICAgfVxuICAgIGFzeW5jIGdldENoaXBEZXNjcmlwdGlvbihsb2FkZXIpIHtcbiAgICAgICAgbGV0IGRlc2M7XG4gICAgICAgIGNvbnN0IHBrZ1ZlciA9IGF3YWl0IHRoaXMuZ2V0UGtnVmVyc2lvbihsb2FkZXIpO1xuICAgICAgICBpZiAocGtnVmVyID09PSAwKSB7XG4gICAgICAgICAgICBkZXNjID0gXCJFU1AzMi1DM1wiO1xuICAgICAgICB9XG4gICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgZGVzYyA9IFwidW5rbm93biBFU1AzMi1DM1wiO1xuICAgICAgICB9XG4gICAgICAgIGNvbnN0IGNoaXBfcmV2ID0gYXdhaXQgdGhpcy5nZXRDaGlwUmV2aXNpb24obG9hZGVyKTtcbiAgICAgICAgZGVzYyArPSBcIiAocmV2aXNpb24gXCIgKyBjaGlwX3JldiArIFwiKVwiO1xuICAgICAgICByZXR1cm4gZGVzYztcbiAgICB9XG4gICAgYXN5bmMgZ2V0Rmxhc2hDYXAobG9hZGVyKSB7XG4gICAgICAgIGNvbnN0IG51bVdvcmQgPSAzO1xuICAgICAgICBjb25zdCBibG9jazFBZGRyID0gdGhpcy5FRlVTRV9CQVNFICsgMHgwNDQ7XG4gICAgICAgIGNvbnN0IGFkZHIgPSBibG9jazFBZGRyICsgNCAqIG51bVdvcmQ7XG4gICAgICAgIGNvbnN0IHJlZ2lzdGVyVmFsdWUgPSBhd2FpdCBsb2FkZXIucmVhZFJlZyhhZGRyKTtcbiAgICAgICAgY29uc3QgZmxhc2hDYXAgPSAocmVnaXN0ZXJWYWx1ZSA+PiAyNykgJiAweDA3O1xuICAgICAgICByZXR1cm4gZmxhc2hDYXA7XG4gICAgfVxuICAgIGFzeW5jIGdldEZsYXNoVmVuZG9yKGxvYWRlcikge1xuICAgICAgICBjb25zdCBudW1Xb3JkID0gNDtcbiAgICAgICAgY29uc3QgYmxvY2sxQWRkciA9IHRoaXMuRUZVU0VfQkFTRSArIDB4MDQ0O1xuICAgICAgICBjb25zdCBhZGRyID0gYmxvY2sxQWRkciArIDQgKiBudW1Xb3JkO1xuICAgICAgICBjb25zdCByZWdpc3RlclZhbHVlID0gYXdhaXQgbG9hZGVyLnJlYWRSZWcoYWRkcik7XG4gICAgICAgIGNvbnN0IHZlbmRvcklkID0gKHJlZ2lzdGVyVmFsdWUgPj4gMCkgJiAweDA3O1xuICAgICAgICBjb25zdCB2ZW5kb3JNYXAgPSB7XG4gICAgICAgICAgICAxOiBcIlhNQ1wiLFxuICAgICAgICAgICAgMjogXCJHRFwiLFxuICAgICAgICAgICAgMzogXCJGTVwiLFxuICAgICAgICAgICAgNDogXCJUVFwiLFxuICAgICAgICAgICAgNTogXCJaQklUXCIsXG4gICAgICAgIH07XG4gICAgICAgIHJldHVybiB2ZW5kb3JNYXBbdmVuZG9ySWRdIHx8IFwiXCI7XG4gICAgfVxuICAgIGFzeW5jIGdldENoaXBGZWF0dXJlcyhsb2FkZXIpIHtcbiAgICAgICAgY29uc3QgZmVhdHVyZXMgPSBbXCJXaS1GaVwiLCBcIkJMRVwiXTtcbiAgICAgICAgY29uc3QgZmxhc2hNYXAgPSB7XG4gICAgICAgICAgICAwOiBudWxsLFxuICAgICAgICAgICAgMTogXCJFbWJlZGRlZCBGbGFzaCA0TUJcIixcbiAgICAgICAgICAgIDI6IFwiRW1iZWRkZWQgRmxhc2ggMk1CXCIsXG4gICAgICAgICAgICAzOiBcIkVtYmVkZGVkIEZsYXNoIDFNQlwiLFxuICAgICAgICAgICAgNDogXCJFbWJlZGRlZCBGbGFzaCA4TUJcIixcbiAgICAgICAgfTtcbiAgICAgICAgY29uc3QgZmxhc2hDYXAgPSBhd2FpdCB0aGlzLmdldEZsYXNoQ2FwKGxvYWRlcik7XG4gICAgICAgIGNvbnN0IGZsYXNoVmVuZG9yID0gYXdhaXQgdGhpcy5nZXRGbGFzaFZlbmRvcihsb2FkZXIpO1xuICAgICAgICBjb25zdCBmbGFzaCA9IGZsYXNoTWFwW2ZsYXNoQ2FwXTtcbiAgICAgICAgY29uc3QgZmxhc2hEZXNjcmlwdGlvbiA9IGZsYXNoICE9PSB1bmRlZmluZWQgPyBmbGFzaCA6IFwiVW5rbm93biBFbWJlZGRlZCBGbGFzaFwiO1xuICAgICAgICBpZiAoZmxhc2ggIT09IG51bGwpIHtcbiAgICAgICAgICAgIGZlYXR1cmVzLnB1c2goYCR7Zmxhc2hEZXNjcmlwdGlvbn0gKCR7Zmxhc2hWZW5kb3J9KWApO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiBmZWF0dXJlcztcbiAgICB9XG4gICAgYXN5bmMgZ2V0Q3J5c3RhbEZyZXEobG9hZGVyKSB7XG4gICAgICAgIHJldHVybiA0MDtcbiAgICB9XG4gICAgX2QyaChkKSB7XG4gICAgICAgIGNvbnN0IGggPSAoK2QpLnRvU3RyaW5nKDE2KTtcbiAgICAgICAgcmV0dXJuIGgubGVuZ3RoID09PSAxID8gXCIwXCIgKyBoIDogaDtcbiAgICB9XG4gICAgYXN5bmMgcmVhZE1hYyhsb2FkZXIpIHtcbiAgICAgICAgbGV0IG1hYzAgPSBhd2FpdCBsb2FkZXIucmVhZFJlZyh0aGlzLk1BQ19FRlVTRV9SRUcpO1xuICAgICAgICBtYWMwID0gbWFjMCA+Pj4gMDtcbiAgICAgICAgbGV0IG1hYzEgPSBhd2FpdCBsb2FkZXIucmVhZFJlZyh0aGlzLk1BQ19FRlVTRV9SRUcgKyA0KTtcbiAgICAgICAgbWFjMSA9IChtYWMxID4+PiAwKSAmIDB4MDAwMGZmZmY7XG4gICAgICAgIGNvbnN0IG1hYyA9IG5ldyBVaW50OEFycmF5KDYpO1xuICAgICAgICBtYWNbMF0gPSAobWFjMSA+PiA4KSAmIDB4ZmY7XG4gICAgICAgIG1hY1sxXSA9IG1hYzEgJiAweGZmO1xuICAgICAgICBtYWNbMl0gPSAobWFjMCA+PiAyNCkgJiAweGZmO1xuICAgICAgICBtYWNbM10gPSAobWFjMCA+PiAxNikgJiAweGZmO1xuICAgICAgICBtYWNbNF0gPSAobWFjMCA+PiA4KSAmIDB4ZmY7XG4gICAgICAgIG1hY1s1XSA9IG1hYzAgJiAweGZmO1xuICAgICAgICByZXR1cm4gKHRoaXMuX2QyaChtYWNbMF0pICtcbiAgICAgICAgICAgIFwiOlwiICtcbiAgICAgICAgICAgIHRoaXMuX2QyaChtYWNbMV0pICtcbiAgICAgICAgICAgIFwiOlwiICtcbiAgICAgICAgICAgIHRoaXMuX2QyaChtYWNbMl0pICtcbiAgICAgICAgICAgIFwiOlwiICtcbiAgICAgICAgICAgIHRoaXMuX2QyaChtYWNbM10pICtcbiAgICAgICAgICAgIFwiOlwiICtcbiAgICAgICAgICAgIHRoaXMuX2QyaChtYWNbNF0pICtcbiAgICAgICAgICAgIFwiOlwiICtcbiAgICAgICAgICAgIHRoaXMuX2QyaChtYWNbNV0pKTtcbiAgICB9XG4gICAgZ2V0RXJhc2VTaXplKG9mZnNldCwgc2l6ZSkge1xuICAgICAgICByZXR1cm4gc2l6ZTtcbiAgICB9XG59XG4iXSwibmFtZXMiOltdLCJzb3VyY2VSb290IjoiIn0=